% Generated by MATLAB(R) 9.13 (R2022b) and Sensor Fusion and Tracking Toolbox 2.4 (R2022b).
% Generated on: 11-Oct-2022 12:00:26


%attribute_vec= [];
for i = 1:1
    positions = [];
    eulerangles = [];
    clear scenario;
    scenario = createScenario;
    [tp, platp, detp, covp] = createPlotters();
    
    % Configure your tracker here:
    
    % Add a trackPlotter here:
    
    % Main simulation loop
    while advance(scenario) && ishghandle(tp.Parent)
        % generate sensor data
        [dets, configs, sensorConfigPIDs] = detect(scenario);
        
        [truePosition, meas, measCov, e] = readData(scenario, dets);
        positions = [positions;truePosition];
        eulerangles = [eulerangles; e];
        %attribute_vec = [positions,eulerangles(:,3)]
        % update your tracker here:
        
        % update plots
%         plotPlatform(platp,truePosition);
%         plotDetection(detp,meas,measCov);
%         plotCoverage(covp,coverageConfig(scenario));
        
        % Update the trackPlotter here:
        
%         drawnow
    end
    writematrix(positions,sprintf('positions_%u.csv', i)); 
    writematrix(eulerangles,sprintf('eulerangles_%u.csv', i)); 

end


function [position, meas, measCov, eulerang] = readData(scenario,dets)
allDets = [dets{:}];

if ~isempty(allDets)
    % extract column vector of measurement positions
    meas = cat(2,allDets.Measurement)';

    % extract measurement noise
    measCov = cat(3,allDets.MeasurementNoise);
else
    meas = zeros(0,3);
    measCov = zeros(3,3,0);
end

truePoses = platformPoses(scenario);
position = vertcat(truePoses(:).Position);
eulerang = eulerd(truePoses(1).Orientation, 'XYZ', 'frame');

end


function [tp, platp, detp, covp] = createPlotters
% Create plotters
tp = theaterPlot('XLim', [-19.0499952293663 73.1702865541693], 'YLim', [-63.3323407980601 28.8879409854753], 'ZLim', [-86.0323407980601 6.18794098547532]);
set(tp.Parent,'YDir','reverse', 'ZDir','reverse');
view(tp.Parent, -37.5, 30);
platp = platformPlotter(tp,'DisplayName','Platforms','MarkerFaceColor','k');
detp = detectionPlotter(tp,'DisplayName','Detections','MarkerSize',6,'MarkerFaceColor',[0.85 0.325 0.098],'MarkerEdgeColor','k','History',10000);
covp = coveragePlotter(tp,'DisplayName','Sensor Coverage');
end


function scenario = createScenario
% Create Scenario
rng('shuffle');
waypoints = wp_gen(5);

scenario = trackingScenario;
scenario.StopTime = Inf;
scenario.UpdateRate = 0;


% Create platforms
Plane = platform(scenario,'ClassID',1);
Plane.Dimensions = struct( ...
    'Length', 1, ...
    'Width', 1, ...
    'Height', 1, ...
    'OriginOffset', [0 0 0]);
Plane.Signatures = {...
    rcsSignature(...
        'FluctuationModel', 'Swerling0', ...
        'Pattern', [20 20;20 20], ...
        'Azimuth', [-180 180], ...
        'Elevation', [-90;90], ...
        'Frequency', [0 1e+20])};
Plane.Trajectory = waypointTrajectory( ...
    waypoints(:,1:3), ...
    TOA(waypoints,10), ...
    'ClimbRate', zeros(1,7), ...
    'AutoPitch', true, ...
    'AutoBank', true);

Tower = platform(scenario,'ClassID',3);
Tower.Dimensions = struct( ...
    'Length', 10, ...
    'Width', 10, ...
    'Height', 60, ...
    'OriginOffset', [0 0 30]);
Tower.Trajectory.Position = [100000 200000 0];

% Create sensors
Rotator = fusionRadarSensor('SensorIndex', 1, ...
    'UpdateRate', 10, ...
    'MountingLocation', [0 -0.06 0], ...
    'FieldOfView', [1 10], ...
    'HasINS', true, ...
    'DetectionCoordinates', 'Scenario');


% Assign sensors to platforms
Plane.Sensors = Rotator;
end
