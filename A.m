% Generated by MATLAB(R) 9.13 (R2022b) and Sensor Fusion and Tracking Toolbox 2.4 (R2022b).
% Generated on: 05-Oct-2022 15:17:11

scenario = createScenario();
[tp, platp, detp, covp] = createPlotters();
truepositions = [];

% Configure your tracker here:

% Add a trackPlotter here:

% Main simulation loop
while advance(scenario) && ishghandle(tp.Parent)
    % generate sensor data
    [dets, configs, sensorConfigPIDs] = detect(scenario);
    
    [truePosition, meas, measCov] = readData(scenario, dets);

    truepositions = [truepositions; truePosition(1,:)];
    
    % update your tracker here:
    
    % update plots
    plotPlatform(platp,truePosition);
    plotDetection(detp,meas,measCov);
    plotCoverage(covp,coverageConfig(scenario));
    disp(dets);
    % Update the trackPlotter here:
    
    drawnow
end


function [position, meas, measCov] = readData(scenario,dets)
allDets = [dets{:}];

if ~isempty(allDets)
    % extract column vector of measurement positions
    meas = cat(2,allDets.Measurement)';

    % extract measurement noise
    measCov = cat(3,allDets.MeasurementNoise);
else
    meas = zeros(0,3);
    measCov = zeros(3,3,0);
end

truePoses = platformPoses(scenario);
position = vertcat(truePoses(:).Position);
end


function [tp, platp, detp, covp] = createPlotters
% Create plotters
tp = theaterPlot('XLim', [-86.2865109264289 -1.53915453900451], 'YLim', [-69.2559527894366 15.4914035979878], 'ZLim', [-79.0608454609955 5.68651092642892]);
set(tp.Parent,'YDir','reverse', 'ZDir','reverse');
view(tp.Parent, 160.7002, 72.7998);
platp = platformPlotter(tp,'DisplayName','Platforms','MarkerFaceColor','k');
detp = detectionPlotter(tp,'DisplayName','Detections','MarkerSize',6,'MarkerFaceColor',[0.85 0.325 0.098],'MarkerEdgeColor','k','History',10000);
covp = coveragePlotter(tp,'DisplayName','Sensor Coverage');
end


function scenario = createScenario
% Create Scenario
scenario = trackingScenario;
scenario.StopTime = Inf;
scenario.UpdateRate = 0;


% Create platforms
Plane1 = platform(scenario,'ClassID',1);
Plane1.Dimensions = struct( ...
    'Length', 0, ...
    'Width', 0, ...
    'Height', 0, ...
    'OriginOffset', [0 0 0]);
Plane1.Signatures = {...
    rcsSignature(...
        'FluctuationModel', 'Swerling0', ...
        'Pattern', [20 20;20 20], ...
        'Azimuth', [-180 180], ...
        'Elevation', [-90;90], ...
        'Frequency', [0 1e+20])};
Plane1.Trajectory = waypointTrajectory( ...
    [-11.9 8.8 0;-22.2 -56.1 -0.02;-80.6 -52.5 -0.05], ...
    [0;1.39770954993722;2.6246740396431], ...
    'Course', [-76.905144833801;-144.051105451809;157.005331783022], ...
    'GroundSpeed', [50;50;50], ...
    'ClimbRate', [0;0;0], ...
    'AutoPitch', true, ...
    'AutoBank', true);

Tower = platform(scenario,'ClassID',3);
Tower.Dimensions = struct( ...
    'Length', 10, ...
    'Width', 10, ...
    'Height', 60, ...
    'OriginOffset', [0 0 30]);
Tower.Trajectory.Position = [-50.2 -25.9 0];


% Create sensors
Sector = fusionRadarSensor('SensorIndex', 1, ...
    'UpdateRate', 10, ...
    'MountingLocation', [-0.02 0.02 0], ...
    'FieldOfView', [1 10], ...
    'HasINS', true, ...
    'DetectionCoordinates', 'Scenario', ...
    'MechanicalAzimuthLimits', [-45 45]);


% Assign sensors to platforms
Tower.Sensors = Sector;
end
